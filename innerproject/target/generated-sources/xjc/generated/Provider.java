//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.28 at 06:11:46 PM GMT 
//


package generated;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}RECID"/>
 *         &lt;element ref="{}SUBPURPOSE"/>
 *         &lt;element ref="{}UKPRN"/>
 *         &lt;element ref="{}Course" maxOccurs="unbounded"/>
 *         &lt;element ref="{}Student" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "recid",
    "subpurpose",
    "ukprn",
    "course",
    "student"
})
@XmlRootElement(name = "Provider")
@Entity(name = "Provider")
@Table(name = "PROVIDER")
@Inheritance(strategy = InheritanceType.JOINED)
public class Provider
    implements Serializable, Equals, HashCode
{

    @XmlElement(name = "RECID", required = true)
    protected RECIDCodeType recid;
    @XmlElement(name = "SUBPURPOSE", required = true)
    protected SUBPURPOSECodeType subpurpose;
    @XmlElement(name = "UKPRN")
    protected int ukprn;
    @XmlElement(name = "Course", required = true)
    protected List<Course> course;
    @XmlElement(name = "Student", required = true)
    protected List<Student> student;

    /**
     * Gets the value of the recid property.
     * 
     * @return
     *     possible object is
     *     {@link RECIDCodeType }
     *     
     */
    @ManyToOne(targetEntity = RECIDCodeType.class, cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "RECID")
    public RECIDCodeType getRECID() {
        return recid;
    }

    /**
     * Sets the value of the recid property.
     * 
     * @param value
     *     allowed object is
     *     {@link RECIDCodeType }
     *     
     */
    public void setRECID(RECIDCodeType value) {
        this.recid = value;
    }

    /**
     * Gets the value of the subpurpose property.
     * 
     * @return
     *     possible object is
     *     {@link SUBPURPOSECodeType }
     *     
     */
    @ManyToOne(targetEntity = SUBPURPOSECodeType.class, cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "SUBPURPOSE")
    public SUBPURPOSECodeType getSUBPURPOSE() {
        return subpurpose;
    }

    /**
     * Sets the value of the subpurpose property.
     * 
     * @param value
     *     allowed object is
     *     {@link SUBPURPOSECodeType }
     *     
     */
    public void setSUBPURPOSE(SUBPURPOSECodeType value) {
        this.subpurpose = value;
    }

    /**
     * Gets the value of the ukprn property.
     * 
     */
    @Id
    @Column(name = "UKPRN", scale = 0)
    public int getUKPRN() {
        return ukprn;
    }

    /**
     * Sets the value of the ukprn property.
     * 
     */
    public void setUKPRN(int value) {
        this.ukprn = value;
    }

    /**
     * Gets the value of the course property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the course property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCourse().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Course }
     * 
     * 
     */
    @OneToMany(targetEntity = Course.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COURSE_PROVIDER_UKPRN")
    public List<Course> getCourse() {
        if (course == null) {
            course = new ArrayList<Course>();
        }
        return this.course;
    }

    /**
     * 
     * 
     */
    public void setCourse(List<Course> course) {
        this.course = course;
    }

    /**
     * Gets the value of the student property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the student property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getStudent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Student }
     * 
     * 
     */
    @OneToMany(targetEntity = Student.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STUDENT_PROVIDER_UKPRN")
    public List<Student> getStudent() {
        if (student == null) {
            student = new ArrayList<Student>();
        }
        return this.student;
    }

    /**
     * 
     * 
     */
    public void setStudent(List<Student> student) {
        this.student = student;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Provider)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Provider that = ((Provider) object);
        {
            RECIDCodeType lhsRECID;
            lhsRECID = this.getRECID();
            RECIDCodeType rhsRECID;
            rhsRECID = that.getRECID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recid", lhsRECID), LocatorUtils.property(thatLocator, "recid", rhsRECID), lhsRECID, rhsRECID)) {
                return false;
            }
        }
        {
            SUBPURPOSECodeType lhsSUBPURPOSE;
            lhsSUBPURPOSE = this.getSUBPURPOSE();
            SUBPURPOSECodeType rhsSUBPURPOSE;
            rhsSUBPURPOSE = that.getSUBPURPOSE();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subpurpose", lhsSUBPURPOSE), LocatorUtils.property(thatLocator, "subpurpose", rhsSUBPURPOSE), lhsSUBPURPOSE, rhsSUBPURPOSE)) {
                return false;
            }
        }
        {
            int lhsUKPRN;
            lhsUKPRN = (true?this.getUKPRN(): 0);
            int rhsUKPRN;
            rhsUKPRN = (true?that.getUKPRN(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ukprn", lhsUKPRN), LocatorUtils.property(thatLocator, "ukprn", rhsUKPRN), lhsUKPRN, rhsUKPRN)) {
                return false;
            }
        }
        {
            List<Course> lhsCourse;
            lhsCourse = (((this.course!= null)&&(!this.course.isEmpty()))?this.getCourse():null);
            List<Course> rhsCourse;
            rhsCourse = (((that.course!= null)&&(!that.course.isEmpty()))?that.getCourse():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "course", lhsCourse), LocatorUtils.property(thatLocator, "course", rhsCourse), lhsCourse, rhsCourse)) {
                return false;
            }
        }
        {
            List<Student> lhsStudent;
            lhsStudent = (((this.student!= null)&&(!this.student.isEmpty()))?this.getStudent():null);
            List<Student> rhsStudent;
            rhsStudent = (((that.student!= null)&&(!that.student.isEmpty()))?that.getStudent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "student", lhsStudent), LocatorUtils.property(thatLocator, "student", rhsStudent), lhsStudent, rhsStudent)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            RECIDCodeType theRECID;
            theRECID = this.getRECID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recid", theRECID), currentHashCode, theRECID);
        }
        {
            SUBPURPOSECodeType theSUBPURPOSE;
            theSUBPURPOSE = this.getSUBPURPOSE();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subpurpose", theSUBPURPOSE), currentHashCode, theSUBPURPOSE);
        }
        {
            int theUKPRN;
            theUKPRN = (true?this.getUKPRN(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ukprn", theUKPRN), currentHashCode, theUKPRN);
        }
        {
            List<Course> theCourse;
            theCourse = (((this.course!= null)&&(!this.course.isEmpty()))?this.getCourse():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "course", theCourse), currentHashCode, theCourse);
        }
        {
            List<Student> theStudent;
            theStudent = (((this.student!= null)&&(!this.student.isEmpty()))?this.getStudent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "student", theStudent), currentHashCode, theStudent);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
